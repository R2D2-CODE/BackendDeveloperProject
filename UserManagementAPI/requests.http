### User Management API - Test Requests with Middleware Testing

@baseUrl = https://localhost:7001
@contentType = application/json

### === AUTHENTICATION TESTS ===

### 1. Login to get JWT token (Public endpoint - no auth required)
# @name login
POST {{baseUrl}}/api/auth/login
Content-Type: {{contentType}}

{
  "username": "admin",
  "password": "admin123"
}

### 2. Login with invalid credentials (should fail)
POST {{baseUrl}}/api/auth/login
Content-Type: {{contentType}}

{
  "username": "invalid",
  "password": "wrong"
}

### Extract token from login response
@authToken = {{login.response.body.$.data.token}}

### 3. Get current user info (requires authentication)
GET {{baseUrl}}/api/auth/me
Authorization: Bearer {{authToken}}

### 4. Try to access protected endpoint without token (should return 401)
GET {{baseUrl}}/api/users
Authorization: Bearer {{authToken}}

### 5. Try with invalid token format (should return 401)
GET {{baseUrl}}/api/users
Authorization: Invalid-Token-Format

### 6. Try with empty token (should return 401)
GET {{baseUrl}}/api/users
Authorization: Bearer 

### === PUBLIC ENDPOINTS (No authentication required) ===

### 7. Health Check (Public endpoint)
GET {{baseUrl}}/health

### 8. API Info (Public endpoint)
GET {{baseUrl}}/info

### 9. Root endpoint (Public endpoint)
GET {{baseUrl}}/

### === PROTECTED USER MANAGEMENT ENDPOINTS ===

### 10. Get all users (requires authentication)
GET {{baseUrl}}/api/users
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

### 11. Create a new user (requires authentication)
# @name createUser
POST {{baseUrl}}/api/users
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "firstName": "Arturo",
  "lastName": "Martinez",
  "email": "arturo.martinez@sismetic.com",
  "phoneNumber": "+1-555-111-0104",
  "department": "Marketing",
  "position": "Developer"
}

### Extract user ID from create response
@userId = {{createUser.response.body.$.data.id}}

### 12. Get specific user (requires authentication)
GET {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

### 13. Update user (requires authentication)
PUT {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "firstName": "Alice Updated",
  "lastName": "Johnson Updated",
  "email": "alice.updated@techhive.com",
  "phoneNumber": "+1-555-9999",
  "department": "Engineering",
  "position": "Senior Manager",
  "isActive": true
}

### === ERROR HANDLING TESTS ===

### 14. Test validation errors (should trigger error handling middleware)
POST {{baseUrl}}/api/users
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "firstName": "",
  "lastName": "Test",
  "email": "invalid-email",
  "department": "",
  "position": "Test Position"
}

### 15. Try to create user with duplicate email (business rule validation)
POST {{baseUrl}}/api/users
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "firstName": "Duplicate",
  "lastName": "Email",
  "email": "alice.johnson@techhive.com",
  "phoneNumber": "+1-555-0999",
  "department": "Test",
  "position": "Tester"
}

### 16. Test exception handling - invalid GUID format
GET {{baseUrl}}/api/users/invalid-guid-format
Authorization: Bearer {{authToken}}

### 17. Test 404 handling - non-existent user
GET {{baseUrl}}/api/users/00000000-0000-0000-0000-000000000000
Authorization: Bearer {{authToken}}

### 18. Delete user (requires authentication)
DELETE {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}

### 19. Try to access deleted user (should return 404)
GET {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{authToken}}

### === MIDDLEWARE TESTING NOTES ===
# 
# This test suite validates the TechHive Solutions middleware implementation:
# 
# 1. Authentication Middleware: 
#    - All /api/users endpoints require valid JWT token
#    - Public endpoints (/health, /info, /swagger) accessible without auth
#    - Invalid tokens return 401 Unauthorized with correlation ID
# 
# 2. Error Handling Middleware: 
#    - Consistent JSON error responses across all endpoints
#    - Proper HTTP status codes (400, 401, 404, 500)
#    - Correlation IDs for error tracking
# 
# 3. Logging Middleware: 
#    - All requests/responses logged with correlation IDs
#    - Performance metrics (response times)
#    - User context and authentication status
#    - Sensitive data sanitization
# 
# 4. Security Features:
#    - Security headers in all responses
#    - HTTPS enforcement with HSTS
#    - JWT token-based authentication
# 
# Check the application logs to verify:
# - Request logging: "REQUEST - CorrelationId: ... | Method: ... | Path: ..."
# - Authentication logs: "AUTH SUCCESS/FAILED - CorrelationId: ..."
# - Exception handling: "EXCEPTION - CorrelationId: ... | Exception: ..."
# - Response logging: "RESPONSE - CorrelationId: ... | StatusCode: ..."
# 
# Demo users for testing:
# - admin/admin123 (Administrator role)
# - user/user123 (User role)
# - techhive/techhive2024 (Manager role)
#
# Usage Instructions:
# 1. Start API: dotnet run
# 2. Execute login request (#1) to get JWT token
# 3. Use token in subsequent authenticated requests
# 4. Monitor logs for middleware activity
# 5. Check browser dev tools for security headers
###
